openapi: 3.0.1
info:
  title: mapproxy-api
  description: rest api service to manage layers in mapproxy
  version: 1.8.1
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
paths:
  /config:
    get:
      operationId: getConfig
      tags:
        - Config
      summary: get current mapproxy config
      responses:
        '200':
          description: OK
          content:
            application/yaml:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/getConfigResponse'
                  - $ref: '#/components/schemas/getConfigYamlResponse'
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/getConfigResponse'
                  - $ref: '#/components/schemas/getConfigYamlResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: Ineternal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /layer:
    post:
      operationId: addLayer
      tags:
        - Layer
      summary: add layer to mapproxy
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: Ineternal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/layer'
    delete:
      operationId: removeLayer
      tags:
        - Layer
      summary: remove layer from mapproxy
      parameters:
        - name: layerNames
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failedRemoveDiscreteLayers'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                LayerNotFound:
                  value:
                    message: Layer name {layerName} is not exists
        '500':
          description: Ineternal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /layer/{name}:
    get:
      operationId: getLayer
      tags:
        - Layer
      summary: get existing layer
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getLayerResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: Ineternal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    put:
      operationId: updateLayer
      tags:
        - Layer
      summary: update existing layer source
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/layer'
        '201':
          description: Created
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/layer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                LayerNotFound:
                  value:
                    message: Layer name {layerName} is not exists
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/layer'
  /mosaic/{name}:
    post:
      operationId: addLayerToMosaic
      tags:
        - Mosaic
      summary: add layer to mosaic
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mosaicLayer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                LayerNotFound:
                  value:
                    message: Layer name {layerName} is not exists
                MosaicNotFound:
                  value:
                    message: Mosaic name {mosaicName} is not exists
        '500':
          description: Ineternal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/mosaicLayer'
    put:
      operationId: updateMosaic
      tags:
        - Mosaic
      summary: update mosaic layers
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mosaic'
        '204':
          description: Updated
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                LayerNotFound:
                  value:
                    message: Layer name {layerName} is not exists
                MosaicNotFound:
                  value:
                    message: Mosaic name {mosaicName} is not exists
        '500':
          description: Ineternal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/mosaic'
components:
  schemas:
    error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    layer:
      type: object
      required:
        - cacheType
        - name
        - tilesPath
        - format
      properties:
        cacheType:
          type: string
          enum:
            - geopackage
            - s3
            - file
          example: s3
        name:
          type: string
          example: amsterdam_5cm-source
        tilesPath:
          type: string
          example: /path/to/tiles/directory/in/bucket/
        format:
          type: string
          enum:
            - PNG
            - JPEG
    getLayerResponse:
      type: object
      required:
        - cache
        - grids
        - sources
        - upscale_tiles
        - format
      properties:
        cache:
          type: object
          properties:
            type:
              type: string
            directory:
              type: string
            directory_layout:
              type: string
        grids:
          type: array
          items:
            type: string
        sources:
          type: array
          items:
            type: string
        upscale_tiles:
          type: number
        format:
          type: string
          enum:
            - image/png
            - image/jpeg
    getConfigResponse:
      type: object
      properties:
        grids:
          type: object
          properties:
            grid:
              type: object
              properties:
                name:
                  type: string
                srs:
                  type: string
                origin:
                  type: string
                min_res:
                  type: number
                num_levels:
                  type: number
                bbox:
                  type: array
                  items:
                    type: number
        caches:
          type: object
          properties:
            cache:
              type: object
              properties:
                type:
                  type: string
                directory:
                  type: string
                directory_layout:
                  type: string
                grids:
                  type: array
                  items:
                    type: string
                format:
                  type: string
                  enum:
                    - image/png
                    - image/jpeg
                sources:
                  type: array
                  items:
                    type: string
                upscale_tiles:
                  type: number
                minimize_meta_request:
                  type: boolean
        layers:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              title:
                type: string
              sources:
                type: array
                items:
                  type: string
        globals:
          type: object
          properties:
            cache:
              type: object
            image:
              type: object
        sources:
          type: object
        services:
          type: object
    getConfigYamlResponse:
      type: string
    mosaicLayer:
      type: object
      required:
        - layerName
      properties:
        layerName:
          type: string
          example: amsterdam_5cm-source
    mosaic:
      type: object
      required:
        - layers
      properties:
        layers:
          type: array
          items:
            type: object
            required:
              - layerName
              - zIndex
            properties:
              layerName:
                type: string
                example: amsterdam_5cm-source
              zIndex:
                type: number
                example: 1
    failedRemoveDiscreteLayers:
      type: array
      items:
        type: string
      example:
        - amsterdam_5cm-source
        - amsterdam_5cm-ortho-source
