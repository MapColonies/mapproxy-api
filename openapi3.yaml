openapi: 3.0.1
info:
  title: mapproxy-api
  description: rest api service to manage layers in mapproxy
  version: 1.0.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://localhost:8080
paths:
  /layer:
    get:
      operationId: getLayer
      tags:
        - Layer
      summary: get existing layer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/layer'
        500:
          description: Ineternal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      operationId: addLayer
      tags:
        - Layer
      summary: add layer to mapproxy
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/layer'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        500:
          description: Ineternal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /layer/{name}:
    delete:
      operationId: removeLayer
      tags:
        - Layer
      summary: remove layer from mapproxy
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Accepted
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                LayerNotFound:
                  value:
                    message: 'Layer name {layerName} is not exists'
        500:
          description: Ineternal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /layer/mosaic:
    get:
      operationId: getLayers
      tags:
        - Mosaic
      summary: get mosaic layers
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mosaic'
        500:
          description: Ineternal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      operationId: addLayerToMosaic
      tags:
        - Mosaic
      summary: add layer to mosaic
      responses:
        201:
          description: created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mosaicLayer'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                LayerNotFound:
                  value:
                    message: 'Layer name {layerName} is not exists'
                MosaicNotFound:
                  value:
                    message: 'Mosaic name {mosaicName} is not exists'
        500:
          description: Ineternal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    put:
      operationId: setZOrder
      tags:
        - Mosaic
      summary: reorder mosaic layers
      responses:
        204:
          description: updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mosaic'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                LayerNotFound:
                  value:
                    message: 'Layer name {layerName} is not exists'
                MosaicNotFound:
                  value:
                    message: 'Mosaic name {mosaicName} is not exists'
        500:
          description: Ineternal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
components:
  schemas:
    error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    layer:
      type: object
      required:
        - name
        - tilesPath
        - maxZoomLevel
      properties:
        name:
          type: string
          example: 'amsterdam_5cm'
        tilesPath:
          type: string
          example: '/path/to/tiles/directory/in/bucket/'
        maxZoomLevel:
          type: number
          format: integer
          example: 18
        description:
          type: string
          example: 'description for germany layer'
    mosaicLayer:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: 'amsterdam_5cm'
    mosaic:
      type: array
      items:
        type: object
        required:
          - name
          - zIndex
        properties:
          name:
            type: string
            example: 'amsterdam_5cm'
          zIndex:
            type: number
            format: integer
            example: 1
